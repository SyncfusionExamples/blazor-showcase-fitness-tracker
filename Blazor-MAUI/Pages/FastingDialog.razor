@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Popups
@using FitnessTracker.Data
@inject FitnessService SampleService

<SfDialog ID="fasting-dialog" CssClass="e-fasting-dialog" Header="Fasting" @bind-Visible="@visible" ShowCloseIcon="true" Width="@fastingDialogwidth" IsModal="true">
    <DialogEvents OnOverlayModalClick="FastingOverlayClick"></DialogEvents>
    <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
    <DialogTemplates>
        <Content>
            <div class="e-fast-start-label">Start Time</div>
            <div class="e-fast-start-date">
                <SfDateTimePicker TValue="DateTime" ID="fast-start-date" @bind-Value="@CountStartDate" Min="@minimumDate" Max="@maximumDate">
                    <DateTimePickerEvents TValue="DateTime" ValueChange="@((e) => OnFastDateChange(e, "startDate"))"></DateTimePickerEvents>
                </SfDateTimePicker>
            </div>
            <div class="e-fast-end-label">End Time</div>
            <div class="e-fast-end-date">
                <SfDateTimePicker TValue="DateTime" ID="fast-end-date" @bind-Value="@CountDownDate" Min="@CountStartDate" Max="@maximumDate">
                    <DateTimePickerEvents TValue="DateTime" ValueChange="@((e) => OnFastDateChange(e, "endDate"))"></DateTimePickerEvents>
                </SfDateTimePicker>
            </div>
            <div class="e-fast-total-label">Total Hours</div>
            <div class="e-fast-total-value">@(diff + "h")</div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="FastingCancelBtnClick" Content="CANCEL" CssClass="e-fasting-cancel"></DialogButton>
        <DialogButton OnClick="FastingDlgBtnClick" Content="START FASTING" CssClass="e-start-fast"></DialogButton>
    </DialogButtons>
</SfDialog>

@code{
    [Parameter]
    public EventCallback StateChange { get; set; }

    internal DateTime CountStartDate { get; set; }
    internal DateTime CountDownDate { get; set; }
    private bool visible { get; set; }
    private string? fastingDialogwidth { get; set; }
    private int diff { get; set; } = 16;
    private DateTime minimumDate { get; set; }
    private DateTime maximumDate { get; set; }

    private void FastingOverlayClick(OverlayModalClickEventArgs args)
    {
        visible = false;
    }

    private void OnFastDateChange(ChangedEventArgs<DateTime> args, string changedDateString)
    {
        if (CountDownDate < CountStartDate)
        {
            CountDownDate = CountStartDate;
            if (changedDateString == "startDate")
            {
                CountDownDate = CountStartDate.Add(new TimeSpan(16, 0, 0));
            }
        }
        diff = (int)Math.Floor((CountDownDate - CountStartDate).TotalMilliseconds/ (1000 * 60 * 60));
    }

    private void FastingCancelBtnClick()
    {
        visible = false;
    }

    private void FastingDlgBtnClick()
    {
        visible = false;
        StateChange.InvokeAsync();
    }

    internal void ShowDialog()
    {
        visible = true;
        diff = (int)Math.Floor((CountDownDate - CountStartDate).TotalMilliseconds / (1000 * 60 * 60));
        StateHasChanged();
    }

    internal void UpdateProps()
    {
        diff = 16;
        fastingDialogwidth = SampleService.IsDevice ? "100%" : "400px";
        minimumDate = DateTime.Now.Date;
        maximumDate = minimumDate.AddDays(1).Add(new TimeSpan(24, 0, 0));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateProps();
    }
}