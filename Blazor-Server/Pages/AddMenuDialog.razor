@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Popups
@using FitnessTracker.Data
@inject FitnessService SampleService

<SfDialog ID="add-menu-dialog" CssClass="e-add-menu-dialog" @bind-Visible="@visible" ShowCloseIcon="true" Width="@dialogwidth" IsModal="true" Header="@CurrentMenuHeader">
    <DialogEvents OnOverlayModalClick="MenuOverlayClick" OnClose="DialogClose"></DialogEvents>
    <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
    <DialogTemplates>
        <Content>
            <div class="e-select-menu-label">Select Menu</div>
            <div class="e-current-menu-container">
                @foreach (MenuItems menu in CurrentMenu)
                {
                    <div tabindex="0" class="@(menu.IsAdded ? "e-card e-menu-card e-card-select" : "e-card e-menu-card")" @onclick="(() => OnMenuCardSelect(menu))" @onclick:stopPropagation="true">
                        <div class="e-card-content">
                            <div class="e-menu-div">@menu.Item</div>
                        </div>
                    </div>
                }
            </div>
            <div class="e-quantity-label-container">
                <div class="e-quantity-label">Quantity</div>
                <div class="e-total-label">Total kcal</div>
                <div class="e-recommended-label">Recommended kcal</div>
            </div>
            <div class="e-quantity-value-container">
                <div class="e-quantity-container">
                    <div class="e-quantity-value">
                        <div class="e-quantity-minus icon-minus" @onclick="QuantityMinusClick"></div>
                        <div class=" e-quantity-count">@currentQuantity</div>
                        <div class="e-quantity-plus icon-plus" @onclick="QuantityPlusClick"></div>
                    </div>
                </div>
                <div class="e-quantity-total-container">
                    <div class="e-quantity-total">@(currentTotalCal + " kcal")</div>
                </div>
                <div class="e-quantity-recom-container">
                    <div class="e-quantity-recom">@(CurrentRecom + " kcal")</div>
                </div>
            </div>
            <div class="e-quantity-date-label-container">
                <div class="e-quantity-date-label">Date</div>
                <div class="e-quantity-time-label">Time</div>
            </div>
            <div class="e-quantity-date-value-container">
                <div class="e-quantity-date-value">
                    <SfDatePicker ID="quantity-datepicker" Width="@dateWidth" Value="@CurrentTime" Enabled="false"></SfDatePicker>
                </div>
                <div class="e-quantity-time-value">
                    <SfTimePicker ID="quantity-timepicker" Width="@timeWidth" @bind-Value="@CurrentTime"></SfTimePicker>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="MenuCancelBtnClick" Content="CANCEL" CssClass="e-menu-cancel"></DialogButton>
        <DialogButton OnClick="MenuDlgBtnClick" Content="ADD MENU" CssClass="e-menu-add"></DialogButton>
    </DialogButtons>
</SfDialog>

@code{
    [Parameter]
    public EventCallback StateChange { get; set; }
    private bool visible { get; set; }
    private string? dialogwidth { get; set; }
    private string? dateWidth { get; set; }
    private string? timeWidth { get; set; }
    private int currentQuantity { get; set; } = 1;
    private int currentTotalCal { get; set; } = 0;
    private string lastSelectItem { get; set; } = string.Empty;
    internal int CurrentRecom { get; set; } = 0;
    internal string? CurrentMenuHeader { get; set; }
    internal List<MenuItems> CurrentMenu { get; set; } = new List<MenuItems>();
    internal string? CurrentAddedMenu { get; set; }
    internal DateTime CurrentTime { get; set; }

    private void MenuOverlayClick(OverlayModalClickEventArgs args)
    {
        MenuCancelBtnClick();
    }

    private void DialogClose(BeforeCloseEventArgs args)
    {
        MenuCancelBtnClick();
    }

    private void MenuCancelBtnClick()
    {
        visible = false;
        currentTotalCal = 0;
        lastSelectItem = string.Empty;
        currentQuantity = 1;
    }

    private void MenuDlgBtnClick()
    {
        switch(CurrentAddedMenu)
        {
            case "Breakfast":
                SampleService.DietData.CurrentBreakFastTime = CurrentTime;
                UpdateBreakfastMenu();
                break;
            case "Snack 1":
                SampleService.DietData.CurrentSnack1Time = CurrentTime;
                UpdatefirstSnackMenu();
                break;
            case "Lunch":
                SampleService.DietData.CurrentLunchTime = CurrentTime;
                UpdateLunchMenu();
                break;
            case "Snack 2":
                SampleService.DietData.CurrentSnack2Time = CurrentTime;
                UpdateSecondSnackMenu();
                break;
            case "Dinner":
                SampleService.DietData.CurrentDinnerTime = CurrentTime;
                UpdateDinnerMenu();
                break;
        }
        SampleService.UpdateConsumedCalories();
        MenuCancelBtnClick();
        SampleService.ProfileTabRef?.StateChanged();
        StateChange.InvokeAsync();
    }

    private void UpdateBreakfastMenu()
    {
        SampleService.DietData.CurrentBreakFastMenu = CurrentMenu.FindAll(x => x.IsAdded).ToList();
        SampleService.DietData.CurrentBreakFastMenuText = string.Join(", ", GetMenuText(SampleService.DietData.CurrentBreakFastMenu));
        SampleService.DietData.CurrentBreakFastCalories = currentTotalCal;
        SampleService.DietData.IsBreakFastMenuAdded = SampleService.DietData.CurrentBreakFastMenu.Any();
        Activity activity = new Activity { Name = "Breakfast", ActivityType = "Breakfast", Amount = SampleService.DietData.CurrentBreakFastMenuText, Percentage = (((double)SampleService.DietData.CurrentBreakFastCalories / SampleService.ExpectedCalories) * 100).ToString("0.00").Replace(".00", string.Empty) + "%", Time = CurrentTime.ToString("hh:mm tt") };
        bool isExist = false;
        for (int i = 0; i < SampleService.TodayActivities.Count; i++)
        {
            if (SampleService.TodayActivities[i].Name == "Breakfast")
            {
                if (SampleService.DietData.CurrentBreakFastMenu.Any())
                {
                    SampleService.TodayActivities[i] = activity;
                }
                else
                {
                    Activity? breakfast = SampleService.TodayActivities.SingleOrDefault(x => x.Name == "Breakfast");
                    if (breakfast != null)
                    {
                        SampleService.TodayActivities.Remove(breakfast);
                    }
                }
                isExist = true;
                break;
            }
        }
        if (!isExist)
        {
            SampleService.TodayActivities.Add(activity);
        }
    }

    private void UpdatefirstSnackMenu()
    {
        SampleService.DietData.CurrentSnack1Menu = CurrentMenu.FindAll(x => x.IsAdded).ToList();
        SampleService.DietData.CurrentSnack1MenuText = string.Join(", ", GetMenuText(SampleService.DietData.CurrentSnack1Menu));
        SampleService.DietData.CurrentSnack1Calories = currentTotalCal;
        SampleService.DietData.IsSnack1MenuAdded = SampleService.DietData.CurrentSnack1Menu.Any();
        Activity activity = new Activity { Name = "Snack1", ActivityType = "Snack", Amount = SampleService.DietData.CurrentSnack1MenuText, Percentage = (((double)SampleService.DietData.CurrentSnack1Calories / SampleService.ExpectedCalories) * 100).ToString("0.00").Replace(".00", string.Empty) + "%", Time = CurrentTime.ToString("hh:mm tt") };
        bool isExist = false;
        for (int i = 0; i < SampleService.TodayActivities.Count; i++)
        {
            if (SampleService.TodayActivities[i].Name == "Snack1")
            {
                if (SampleService.DietData.CurrentSnack1Menu.Any())
                {
                    SampleService.TodayActivities[i] = activity;
                }
                else
                {
                    Activity? snack = SampleService.TodayActivities.SingleOrDefault(x => x.Name == "Snack1");
                    if (snack != null)
                    {
                        SampleService.TodayActivities.Remove(snack);
                    }
                }
                isExist = true;
                break;
            }
        }
        if (!isExist)
        {
            SampleService.TodayActivities.Add(activity);
        }
    }

    private void UpdateLunchMenu()
    {
        SampleService.DietData.CurrentLunchMenu = CurrentMenu.FindAll(x => x.IsAdded).ToList();
        SampleService.DietData.CurrentLunchMenuText = string.Join(", ", GetMenuText(SampleService.DietData.CurrentLunchMenu));
        SampleService.DietData.CurrentLunchCalories = currentTotalCal;
        SampleService.DietData.IsLunchMenuAdded = SampleService.DietData.CurrentLunchMenu.Any();
        Activity activity = new Activity { Name = "Lunch", ActivityType = "Lunch", Amount = SampleService.DietData.CurrentLunchMenuText, Percentage = (((double)SampleService.DietData.CurrentLunchCalories / SampleService.ExpectedCalories) * 100).ToString("0.00").Replace(".00", string.Empty) + "%", Time = CurrentTime.ToString("hh:mm tt") };
        bool isExist = false;
        for (int i = 0; i < SampleService.TodayActivities.Count; i++)
        {
            if (SampleService.TodayActivities[i].Name == "Lunch")
            {
                if (SampleService.DietData.CurrentLunchMenu.Any())
                {
                    SampleService.TodayActivities[i] = activity;
                }
                else
                {
                    Activity? lunch = SampleService.TodayActivities.SingleOrDefault(x => x.Name == "Lunch");
                    if (lunch != null)
                    {
                        SampleService.TodayActivities.Remove(lunch);
                    }
                }
                isExist = true;
                break;
            }
        }
        if (!isExist)
        {
            SampleService.TodayActivities.Add(activity);
        }
    }

    private void UpdateSecondSnackMenu()
    {
        SampleService.DietData.CurrentSnack2Menu = CurrentMenu.FindAll(x => x.IsAdded).ToList();
        SampleService.DietData.CurrentSnack2MenuText = string.Join(", ", GetMenuText(SampleService.DietData.CurrentSnack2Menu));
        SampleService.DietData.CurrentSnack2Calories = currentTotalCal;
        SampleService.DietData.IsSnack2MenuAdded = SampleService.DietData.CurrentSnack2Menu.Any();
        Activity activity = new Activity { Name = "Snack2", ActivityType = "Snack", Amount = SampleService.DietData.CurrentSnack2MenuText, Percentage = (((double)SampleService.DietData.CurrentSnack2Calories / SampleService.ExpectedCalories) * 100).ToString("0.00").Replace(".00", string.Empty) + "%", Time = CurrentTime.ToString("hh:mm tt") };
        bool isExist = false;
        for (int i = 0; i < SampleService.TodayActivities.Count; i++)
        {
            if (SampleService.TodayActivities[i].Name == "Snack2")
            {
                if (SampleService.DietData.CurrentSnack2Menu.Any())
                {
                    SampleService.TodayActivities[i] = activity;
                }
                else
                {
                    Activity? snack = SampleService.TodayActivities.SingleOrDefault(x => x.Name == "Snack2");
                    if (snack != null)
                    {
                        SampleService.TodayActivities.Remove(snack);
                    }
                }
                isExist = true;
                break;
            }
        }
        if (!isExist)
        {
            SampleService.TodayActivities.Add(activity);
        }
    }

    private void UpdateDinnerMenu()
    {
        SampleService.DietData.CurrentDinnerMenu = CurrentMenu.FindAll(x => x.IsAdded).ToList();
        SampleService.DietData.CurrentDinnerMenuText = string.Join(", ", GetMenuText(SampleService.DietData.CurrentDinnerMenu));
        SampleService.DietData.CurrentDinnerCalories = currentTotalCal;
        SampleService.DietData.IsDinnerMenuAdded = SampleService.DietData.CurrentDinnerMenu.Any();
        Activity activity = new Activity { Name = "Dinner", ActivityType = "Dinner", Amount = SampleService.DietData.CurrentDinnerMenuText, Percentage = (((double)SampleService.DietData.CurrentDinnerCalories / SampleService.ExpectedCalories) * 100).ToString("0.00").Replace(".00", string.Empty) + "%", Time = CurrentTime.ToString("hh:mm tt") };
        bool isExist = false;
        for (int i = 0; i < SampleService.TodayActivities.Count; i++)
        {
            if (SampleService.TodayActivities[i].Name == "Dinner")
            {
                if (SampleService.DietData.CurrentLunchMenu.Any())
                {
                    SampleService.TodayActivities[i] = activity;
                }
                else
                {
                    Activity? dinner = SampleService.TodayActivities.SingleOrDefault(x => x.Name == "Dinner");
                    if (dinner != null)
                    {
                        SampleService.TodayActivities.Remove(dinner);
                    }
                }
                isExist = true;
                break;
            }
        }
        if (!isExist)
        {
            SampleService.TodayActivities.Add(activity);
        }
    }

    private List<string> GetMenuText(List<MenuItems> menuItem)
    {
        return menuItem.Select(x => x.Item).ToList();
    }

    private void QuantityMinusClick()
    {
        currentQuantity = currentQuantity > 1 ? (currentQuantity - 1) : 1;
        for (int i = 0; i < CurrentMenu.Count; i++) {
            if (CurrentMenu[i].Item == lastSelectItem) {
                CurrentMenu[i].Quantity = currentQuantity;
            }
        }
        UpdateTotalCal();
    }

    private void QuantityPlusClick()
    {
        if (string.IsNullOrEmpty(lastSelectItem))
        {
            return;
        }
        currentQuantity += 1;
        for (int i = 0; i < CurrentMenu.Count; i++) {
            if (CurrentMenu[i].Item == lastSelectItem) {
                CurrentMenu[i].Quantity = currentQuantity;
            }
        }
        UpdateTotalCal();
    }

    private void OnMenuCardSelect(MenuItems menu)
    {
        currentQuantity = 1;
        bool selectedCard = !menu.IsAdded;
        lastSelectItem = selectedCard ?  menu.Item : string.Empty;
        for (var i = 0; i < CurrentMenu.Count; i++) {
            if (CurrentMenu[i].Item == menu.Item) {
                if (selectedCard) {
                    CurrentMenu[i].IsAdded = true;
                    CurrentMenu[i].Quantity = currentQuantity;
                } else {
                    CurrentMenu[i].IsAdded = false;
                    CurrentMenu[i].Quantity = 0;
                }
            }
        }
        UpdateTotalCal();
    }

    internal void ShowDialog()
    {
        visible = true;
        StateHasChanged();
    }

    internal void UpdateTotalCal()
    {
        currentTotalCal = 0;
        string lastItem = string.Empty;
        for (int i = 0; i < CurrentMenu.Count; i++)
        {
            if (CurrentMenu[i].IsAdded)
            {
                int quantity = CurrentMenu[i].Quantity ?? 1;
                currentTotalCal += (CurrentMenu[i].Cal *  quantity);
                lastItem = CurrentMenu[i].Item;
            }
        }
        lastSelectItem = string.IsNullOrEmpty(lastSelectItem) ? lastItem : lastSelectItem;
    }

    internal void UpdateProps()
    {
        dialogwidth = SampleService.IsDevice ? "100%" : "700px";
        dateWidth = SampleService.IsDevice && SampleService.InnerWidth < 450 ? "100%" : "80%";
        timeWidth = SampleService.IsDevice && SampleService.InnerWidth < 450 ? "100%" : "160px";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateProps();
    }
}